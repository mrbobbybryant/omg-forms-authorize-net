!function(e){function t(r){if(n[r])return n[r].exports;var a=n[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,t),a.l=!0,a.exports}var n={};t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="/dist/",t(t.s=0)}([function(e,t,n){"use strict";var r=n(1),a=function(e){return e&&e.__esModule?e:{default:e}}(r);document.addEventListener("DOMContentLoaded",function(){(0,a.default)()})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){function e(e,t,r){if(!1===t&&""==!r.target.value){var a=n.querySelector(".omg-error");e.parentNode.classList.add("error"),a.innerHTML="This card number is not valid"}else""!=r.target.value&&!0!==t||e.parentNode.classList.remove("error")}function t(){var e=l.value,t=c.value,n=a.default.validateCardExpiry(e,t);!1===n&&""==!e&&""==!t?(o.classList.add("error"),i.classList.add("error")):(!0===n||""==e&&""==t)&&(o.classList.remove("error"),i.classList.remove("error"))}if(!(arguments.length>0&&void 0!==arguments[0]?arguments[0]:document.getElementById("donationForm")))return!1;var n=document.getElementById("omg-forms-card_number"),r=n.querySelector("input"),u=document.querySelectorAll(".donation-expiration-date"),o=document.getElementById("omg-forms-expiration_month"),l=o.querySelector("select"),i=document.getElementById("omg-forms-expiration_year"),c=i.querySelector("select"),d=document.getElementById("omg-forms-card_code"),s=d.querySelector("input");a.default.cardNumberInput(r),a.default.cvcInput(s),r.addEventListener("keyup",function(t){n.classList.contains("error")&&e(r,a.default.validateCardNumber(t.target.value),t)}),s.addEventListener("keyup",function(t){d.classList.contains("error")&&e(s,a.default.validateCardCVC(t.target.value),t)}),r.addEventListener("blur",function(){e(r,a.default.validateCardNumber(event.target.value),event)}),s.addEventListener("blur",function(){e(s,a.default.validateCardCVC(event.target.value),event)}),[].forEach.call(u,function(e){e.querySelector("select").addEventListener("change",function(){t()})})};var r=n(2),a=function(e){return e&&e.__esModule?e:{default:e}}(r)},function(e,t,n){(function(e){(function(){var t=[].indexOf||function(e){for(var t=0,n=this.length;t<n;t++)if(t in this&&this[t]===e)return t;return-1};!function(t,r){void 0!==e&&null!==e?e.exports=r():n(4)("payform",r)}(0,function(){var e,n,r,a,u,o,l,i,c,d,s,f,g,v,h,p,m,y,C,L,b,S,w;return n=function(e){var t,n,r;return null!=e.selectionStart?e.selectionStart:null!=document.selection?(e.focus(),t=document.selection.createRange(),r=e.createTextRange(),n=r.duplicate(),r.moveToBookmark(t.getBookmark()),n.setEndPoint("EndToStart",r),n.text.length):void 0},e=function(e){return function(t){return null==t&&(t=window.event),t.target=t.target||t.srcElement,t.which=t.which||t.keyCode,null==t.preventDefault&&(t.preventDefault=function(){return this.returnValue=!1}),e(t)}},r=function(t,n,r){return r=e(r),null!=t.addEventListener?t.addEventListener(n,r,!1):t.attachEvent("on"+n,r)},h={},o=/(\d{1,4})/g,h.cards=[{type:"visaelectron",pattern:/^4(026|17500|405|508|844|91[37])/,format:o,length:[16],cvcLength:[3],luhn:!0},{type:"maestro",pattern:/^(5(018|0[23]|[68])|6(39|7))/,format:o,length:[12,13,14,15,16,17,18,19],cvcLength:[3],luhn:!0},{type:"forbrugsforeningen",pattern:/^600/,format:o,length:[16],cvcLength:[3],luhn:!0},{type:"dankort",pattern:/^5019/,format:o,length:[16],cvcLength:[3],luhn:!0},{type:"visa",pattern:/^4/,format:o,length:[13,16],cvcLength:[3],luhn:!0},{type:"mastercard",pattern:/^(5[1-5]|2[2-7])/,format:o,length:[16],cvcLength:[3],luhn:!0},{type:"amex",pattern:/^3[47]/,format:/(\d{1,4})(\d{1,6})?(\d{1,5})?/,length:[15],cvcLength:[3,4],luhn:!0},{type:"dinersclub",pattern:/^3[0689]/,format:/(\d{1,4})(\d{1,4})?(\d{1,4})?(\d{1,2})?/,length:[14],cvcLength:[3],luhn:!0},{type:"discover",pattern:/^6([045]|22)/,format:o,length:[16],cvcLength:[3],luhn:!0},{type:"unionpay",pattern:/^(62|88)/,format:o,length:[16,17,18,19],cvcLength:[3],luhn:!1},{type:"jcb",pattern:/^35/,format:o,length:[16],cvcLength:[3],luhn:!0}],a=function(e){var t,n,r,a;for(e=(e+"").replace(/\D/g,""),a=h.cards,n=0,r=a.length;n<r;n++)if(t=a[n],t.pattern.test(e))return t},u=function(e){var t,n,r,a;for(a=h.cards,n=0,r=a.length;n<r;n++)if(t=a[n],t.type===e)return t},v=function(e){var t,n,r,a,u,o;for(u=!0,o=0,n=(e+"").split("").reverse(),r=0,a=n.length;r<a;r++)t=n[r],t=parseInt(t,10),(u=!u)&&(t*=2),t>9&&(t-=9),o+=t;return o%10==0},g=function(e){var t;return!(null==("undefined"!=typeof document&&null!==document&&null!=(t=document.selection)?t.createRange:void 0)||!document.selection.createRange().text)||null!=e.selectionStart&&e.selectionStart!==e.selectionEnd},C=function(e){var t,n,r,a,u,o,l,i;for(null==e&&(e=""),r="０１２３４５６７８９",a="0123456789",i="",n=e.split(""),u=0,l=n.length;u<l;u++)t=n[u],o=r.indexOf(t),o>-1&&(t=a[o]),i+=t;return i},m=function(e){var t;if(t=n(e.target),e.target.value=h.formatCardNumber(e.target.value),null!=t&&"change"!==e.type)return e.target.setSelectionRange(t,t)},d=function(e){var t,r,u,o,l,i,c;if(u=String.fromCharCode(e.which),/^\d+$/.test(u)&&(c=e.target.value,t=a(c+u),o=(c.replace(/\D/g,"")+u).length,i=16,t&&(i=t.length[t.length.length-1]),!(o>=i||(r=n(e.target))&&r!==c.length)))return l=t&&"amex"===t.type?/^(\d{4}|\d{4}\s\d{6})$/:/(?:^|\s)(\d{4})$/,l.test(c)?(e.preventDefault(),setTimeout(function(){return e.target.value=c+" "+u})):l.test(c+u)?(e.preventDefault(),setTimeout(function(){return e.target.value=c+u+" "})):void 0},l=function(e){var t,r;if(r=e.target.value,8===e.which&&(!(t=n(e.target))||t===r.length))return/\d\s$/.test(r)?(e.preventDefault(),setTimeout(function(){return e.target.value=r.replace(/\d\s$/,"")})):/\s\d?$/.test(r)?(e.preventDefault(),setTimeout(function(){return e.target.value=r.replace(/\d$/,"")})):void 0},y=function(e){var t;if(t=n(e.target),e.target.value=h.formatCardExpiry(e.target.value),null!=t&&"change"!==e.type)return e.target.setSelectionRange(t,t)},c=function(e){var t,n;if(t=String.fromCharCode(e.which),/^\d+$/.test(t))return n=e.target.value+t,/^\d$/.test(n)&&"0"!==n&&"1"!==n?(e.preventDefault(),setTimeout(function(){return e.target.value="0"+n+" / "})):/^\d\d$/.test(n)?(e.preventDefault(),setTimeout(function(){return e.target.value=n+" / "})):void 0},s=function(e){var t,n;if(t=String.fromCharCode(e.which),/^\d+$/.test(t))return n=e.target.value,/^\d\d$/.test(n)?e.target.value=n+" / ":void 0},f=function(e){var t,n;if("/"===(n=String.fromCharCode(e.which))||" "===n)return t=e.target.value,/^\d$/.test(t)&&"0"!==t?e.target.value="0"+t+" / ":void 0},i=function(e){var t,r;if(r=e.target.value,8===e.which&&(!(t=n(e.target))||t===r.length))return/\d\s\/\s$/.test(r)?(e.preventDefault(),setTimeout(function(){return e.target.value=r.replace(/\d\s\/\s$/,"")})):void 0},p=function(e){var t;if(t=n(e.target),e.target.value=C(e.target.value).replace(/\D/g,"").slice(0,4),null!=t&&"change"!==e.type)return e.target.setSelectionRange(t,t)},w=function(e){var t;if(!(e.metaKey||e.ctrlKey||0===e.which||e.which<33))return t=String.fromCharCode(e.which),/^\d+$/.test(t)?void 0:e.preventDefault()},b=function(e){var t,n,r;if(n=String.fromCharCode(e.which),/^\d+$/.test(n)&&!g(e.target))return r=(e.target.value+n).replace(/\D/g,""),t=a(r),t&&r.length>t.length[t.length.length-1]?e.preventDefault():r.length>16?e.preventDefault():void 0},S=function(e){var t,n;if(t=String.fromCharCode(e.which),/^\d+$/.test(t)&&!g(e.target))return n=e.target.value+t,n=n.replace(/\D/g,""),n.length>6?e.preventDefault():void 0},L=function(e){var t,n;if(t=String.fromCharCode(e.which),/^\d+$/.test(t)&&!g(e.target))return n=e.target.value+t,n.length>4?e.preventDefault():void 0},h.cvcInput=function(e){return r(e,"keypress",w),r(e,"keypress",L),r(e,"paste",p),r(e,"change",p),r(e,"input",p)},h.expiryInput=function(e){return r(e,"keypress",w),r(e,"keypress",S),r(e,"keypress",c),r(e,"keypress",f),r(e,"keypress",s),r(e,"keydown",i),r(e,"change",y),r(e,"input",y)},h.cardNumberInput=function(e){return r(e,"keypress",w),r(e,"keypress",b),r(e,"keypress",d),r(e,"keydown",l),r(e,"paste",m),r(e,"change",m),r(e,"input",m)},h.numericInput=function(e){return r(e,"keypress",w),r(e,"paste",w),r(e,"change",w),r(e,"input",w)},h.parseCardExpiry=function(e){var t,n,r,a;return e=e.replace(/\s/g,""),r=e.split("/",2),t=r[0],a=r[1],2===(null!=a?a.length:void 0)&&/^\d+$/.test(a)&&(n=(new Date).getFullYear(),n=n.toString().slice(0,2),a=n+a),t=parseInt(t,10),a=parseInt(a,10),{month:t,year:a}},h.validateCardNumber=function(e){var n,r;return e=(e+"").replace(/\s+|-/g,""),!!/^\d+$/.test(e)&&(!!(n=a(e))&&(r=e.length,t.call(n.length,r)>=0&&(!1===n.luhn||v(e))))},h.validateCardExpiry=function(e,t){var n,r,a;return"object"==typeof e&&"month"in e&&(a=e,e=a.month,t=a.year),!(!e||!t)&&(e=String(e).trim(),t=String(t).trim(),!!/^\d+$/.test(e)&&(!!/^\d+$/.test(t)&&(1<=e&&e<=12&&(2===t.length&&(t=t<70?"20"+t:"19"+t),4===t.length&&(r=new Date(t,e),n=new Date,r.setMonth(r.getMonth()-1),r.setMonth(r.getMonth()+1,1),r>n)))))},h.validateCardCVC=function(e,n){var r,a;return e=String(e).trim(),!!/^\d+$/.test(e)&&(r=u(n),null!=r?(a=e.length,t.call(r.cvcLength,a)>=0):e.length>=3&&e.length<=4)},h.parseCardType=function(e){var t;return e?(null!=(t=a(e))?t.type:void 0)||null:null},h.formatCardNumber=function(e){var t,n,r,u;return e=C(e),e=e.replace(/\D/g,""),(t=a(e))?(u=t.length[t.length.length-1],e=e.slice(0,u),t.format.global?null!=(r=e.match(t.format))?r.join(" "):void 0:null!=(n=t.format.exec(e))?(n.shift(),n=n.filter(Boolean),n.join(" ")):void 0):e},h.formatCardExpiry=function(e){var t,n,r,a;return e=C(e),(n=e.match(/^\D*(\d{1,2})(\D+)?(\d{1,4})?/))?(t=n[1]||"",r=n[2]||"",a=n[3]||"",a.length>0?r=" / ":" /"===r?(t=t.substring(0,1),r=""):2===t.length||r.length>0?r=" / ":1===t.length&&"0"!==t&&"1"!==t&&(t="0"+t,r=" / "),t+r+a):""},h})}).call(this)}).call(t,n(3)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){e.exports=function(){throw new Error("define cannot be used indirect")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,